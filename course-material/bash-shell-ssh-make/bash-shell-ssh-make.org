* Introduction to the shell and task automation                    :noexport:

(Matthieu Bruneaux)

** Presentation of the shell

- Command line interface, looks old-fashioned but very convenient
- Main interface when you want to login to CSC servers or remote Linux servers
- Also present in Linux distributions for personal computers and Mac
- With Windows, the cmd prompt is a bit similar (text-based) but not as
  powerful

** Where can we find the shell?

+ On Linux and MacOS systems: open a terminal. This will provide you with a
  Unix-like shell on both systems
+ On Windows: run "cmd.exe" or "cmd". This shell is quite different from the
  Unix-like shell found in Linux and MacOS. To obtain a Unix shell on Windows,
  one can install the [[https://www.cygwin.com/][Cygwin]] tools.
+ It is strongly recommended to learn how to use a Unix shell since it is very
  likely it is this type of shell you will be exposed to when you connect to a
  remote server.

** One shell or several shells?

- A shell is a just a program providing an interface between the user and the
  computer. Several different programs (shells) exist that can fulfill this
  task.
- The most popular and widely used shell is probably *bash*. It is the
  default shell in most GNU/Linux distributions.
- If you learn how to use *bash*, you will be able to use most remote servers
  you'll have to connect to, and also the terminal from MacOS or the Cygwin
  tools on Windows

** Connection to a remote shell

- Connection to taito server using the provided student accounts and password
- Connection to linux.utu.fi
- Connection to desktop computer in Utu (if running Linux)
- Tools: putty (windows) or ssh (mac and linux)
- A word about the security of connections?

** Shell basics

- Different flavours of shell (bash, tcsh, &#x2026;)
- Files and directories (ls, rm, mv, cp, mkdir, touch)
- Owners, groups and rwx rights
- Reading files (cat, less)
- Redirection (>, >>, <)
- stdin, stdout, stderr
- grep, wc, sort, uniq, cut, sed
- pipes
- example of a pipe to process a data file (count number of different species
  in aligned sequences in a fasta files: grep for ">", cut for species name,
  sort and uniq, wc)
- shell cheat sheet (Tiina prepared one for the Jyväskylä workshop in 2011)

*** First contact with the shell

- What you see after connection in the *shell prompt*. It tells you the shell
  is ready to receive your input:
  #+BEGIN_EXAMPLE
  jyybio20@taito-login3$
  #+END_EXAMPLE
  =jyybio20= is your username, =taito-login= is the host server to which you
  are connected.
- The shell executes commands you enter at the prompt. Type:
  #+BEGIN_SRC bash
  ls
  #+END_SRC
  and press =RETURN=
  #+BEGIN_EXAMPLE
  appl_taito
  #+END_EXAMPLE
- You just ran the =ls= command which produces an output: the list of files and
  folder present in the current directory. When you login to a server, you are
  automatically sent to your home folder. You can see where you are by typing:
  #+BEGIN_SRC bash
  pwd
  #+END_SRC
  #+BEGIN_EXAMPLE
  /homeappl/home/jyybio20
  #+END_EXAMPLE
  So you are now in the folder =jyybio20=, which is itself contained in =home=,
  which is contained in =homeappl=, which is at the root of the file system
  (=/=, there is nothing above).
- You can add options to a command with the dash sign =-=:
  #+BEGIN_SRC bash
  ls -l
  #+END_SRC
  This runs the =ls= command with the =-l= option, which produces a detailed
  output:
  #+BEGIN_EXAMPLE
  total 4
  drwx------ 2 jyybio20 jyybio 4096 Apr 15 12:15 appl_taito
  drwx------ 2 jyybio20 jyybio 4096 Apr 15 15:22 ecoli-data
  #+END_EXAMPLE
  Now you can see the date of last modification of the folders and some other
  information. We'll see later in more details what the other information
  means.

*** Basic folder navigation

- We can navigate from folder to folder using the =cd= command:
  #+BEGIN_SRC bash
  cd ecoli-data
  ls
  #+END_SRC
  You can see there are already some files in this folder. Let's ask for more details:
  #+BEGIN_SRC bash
  ls -l
  #+END_SRC
  #+BEGIN_EXAMPLE
  total 110308
  -rw------- 1 jyybio20 jyybio 2129967 Apr 15 15:21 Escherichia_coli_o25_nm_str_e2539c1.GCA_000618405.1.26.pep.all.fa
  -rw------- 1 jyybio20 jyybio 2250684 Apr 15 15:21 Escherichia_coli_o26_h11_str_03_3500.GCA_000622445.1.26.pep.all.fa
  -rw------- 1 jyybio20 jyybio 2329989 Apr 15 15:21 Escherichia_coli_o26_h11_str_05_3646.GCA_000617065.1.26.pep.all.fa
  -rw------- 1 jyybio20 jyybio 2260347 Apr 15 15:21 Escherichia_coli_o26_h11_str_06_3464.GCA_000622465.1.26.pep.all.fa
  -rw------- 1 jyybio20 jyybio 2565754 Apr 15 15:21 Escherichia_coli_o26_h11_str_11368.GCA_000091005.1.26.pep.all.fa
  [...]
  #+END_EXAMPLE
  We can ask for more human-readable sizes with:
  #+BEGIN_SRC bash
  ls -l -h
  #+END_SRC
  #+BEGIN_EXAMPLE
  total 108M
  -rw------- 1 jyybio20 jyybio 2.1M Apr 15 15:21 Escherichia_coli_o25_nm_str_e2539c1.GCA_000618405.1.26.pep.all.fa
  -rw------- 1 jyybio20 jyybio 2.2M Apr 15 15:21 Escherichia_coli_o26_h11_str_03_3500.GCA_000622445.1.26.pep.all.fa
  -rw------- 1 jyybio20 jyybio 2.3M Apr 15 15:21 Escherichia_coli_o26_h11_str_05_3646.GCA_000617065.1.26.pep.all.fa
  -rw------- 1 jyybio20 jyybio 2.2M Apr 15 15:21 Escherichia_coli_o26_h11_str_06_3464.GCA_000622465.1.26.pep.all.fa
  -rw------- 1 jyybio20 jyybio 2.5M Apr 15 15:21 Escherichia_coli_o26_h11_str_11368.GCA_000091005.1.26.pep.all.fa
  #+END_EXAMPLE
  We could also combine both options to =ls=: =ls -lh=
- We can go back to the parent folder using =cd ..=
  #+BEGIN_SRC bash
  cd ..
  ls
  #+END_SRC
  #+BEGIN_EXAMPLE
  appl_taito  ecoli-data
  #+END_EXAMPLE
- Now we can create a new folder to do some exercises:
  #+BEGIN_SRC bash
  mkdir test-folder
  ls
  #+END_SRC
  #+BEGIN_EXAMPLE
  appl_taito  ecoli-data  test-folder
  #+END_EXAMPLE
- When you want to go back to your home folder, from wherever you are in the
  folder tree, you can just type:
  #+BEGIN_SRC bash
  cd ~
  #+END_SRC
  The =~= is automatically replaced by the shell by your home folder path.
- Actually, when you want to be /very/ lazy, you can just type =cd= to go back
  to your home folder:
  #+BEGIN_SRC bash
  cd
  #+END_SRC
  But the =~= is also useful when you need to specify your home folder in a
  more complicated path:
  #+BEGIN_SRC bash
  cd ~/ecoli-data
  #+END_SRC

*** Auto-completion

- Let's go into =test-folder=, but let's be lazy:
  #+BEGIN_SRC bash
  cd t # Press TAB at this point
  #+END_SRC
  When you press =TAB=, the shell tries to complete what you just typed by
  itself. This auto-completion feature of the shell is very convenient and will
  save you a lot of typing!
  #+BEGIN_SRC bash
  cd test-folder
  ls
  cd ~
  ls
  #+END_SRC
  Now we are back into your home folder.
- Let's create another folder, =test-completion=:
  #+BEGIN_SRC bash
  mkdir test-completion
  ls
  #+END_SRC
  And now let's try the auto-completion again:
  #+BEGIN_SRC bash
  cd t # Press TAB
  #+END_SRC
  You see that the shell completes up to a certain point: =cd test-= and then
  wait for your input. This is because there is an ambiguity: two folders can
  match what you just typed, and the shell needs your help to decide which
  folder name it should use.
- Press =TAB= twice: the shell will show you what are the possible
  completions:
  #+BEGIN_EXAMPLE
  cd test- # Press TAB twice
  #+END_EXAMPLE
  #+BEGIN_EXAMPLE
  test-completion/ test-folder/
  #+END_EXAMPLE  
  You can now just add a "c" and press =TAB= again to make the shell complete
  the path:
  #+BEGIN_SRC bash
  cd test-c # Press TAB
  #+END_SRC

*** Copying, moving and removing files

- Let's create an empty file with the =touch= command:
  #+BEGIN_SRC bash
  touch mySuperFile
  #+END_SRC
  The =touch= command takes as an argument the string =mySuperFile=. Let's
  check with =ls -l=:
  #+BEGIN_SRC bash
  ls -l
  #+END_SRC
  #+BEGIN_EXAMPLE
  total 4
  drwx------ 2 jyybio20 jyybio 4096 Apr 15 12:15 appl_taito
  drwx------ 2 jyybio20 jyybio 4096 Apr 15 15:22 ecoli-data
  -rw------- 1 jyybio20 jyybio    0 Apr 15 15:22 mySuperFile
  #+END_EXAMPLE
  Now we have a new file, with size 0 (it is empty).
- cp
- mv
- rm

*** Viewing a file

- We can display the content of a text file with =cat=:
  #+BEGIN_SRC bash
  cat README
  #+END_SRC
  #+BEGIN_EXAMPLE
  Those files were downloaded from the Ensembl genomes website.

  Each file corresponds to one Escherichia coli strain for which a
  complete or draft genome sequence is available. The name of the strain
  is contained in the file name. Each file contains the peptide
  sequences from all translations resulting from Ensembl known or novel
  gene predictions for that given E. coli strain.

  Files are in the FASTA format.

  The original address is
  ftp://ftp.ensemblgenomes.org/pub/current/bacteria/fasta/
  #+END_EXAMPLE
- We can use =cat= for big files too:
  #+BEGIN_SRC bash
  cat Escherichia_coli_o25_nm_str_e2539c1.GCA_000618405.1.26.pep.all.fa
  #+END_SRC
  but it is not so useful...
- We can look at the beginning of a file with =head=:
  #+BEGIN_SRC bash
  head Escherichia_coli_o25_nm_str_e2539c1.GCA_000618405.1.26.pep.all.fa
  #+END_SRC
  and we can also ask for a specific number of lines:
  #+BEGIN_SRC bash
  head -n 20 Escherichia_coli_o25_nm_str_e2539c1.GCA_000618405.1.26.pep.all.fa  
  #+END_SRC
  In this case, =head= takes the =-n= option with a numerical argument, =20=,
  to display the 20 first lines.
- To look at the end of a file, we can use =tail=:
  #+BEGIN_SRC bash
  tail Escherichia_coli_o25_nm_str_e2539c1.GCA_000618405.1.26.pep.all.fa
  tail -n 30 Escherichia_coli_o25_nm_str_e2539c1.GCA_000618405.1.26.pep.all.fa
  #+END_SRC
- But when we have a file we want to navigate, the most useful is probably
  =less=:
  #+BEGIN_SRC bash
  less Escherichia_coli_o25_nm_str_e2539c1.GCA_000618405.1.26.pep.all.fa
  #+END_SRC
  You can use =UP ARROW= and =DOWN ARROW= to move around the file. You can also
  navigate with =SPACE= and =b= to go down or up one screen, respectively. To
  exit, press =q=.

*** Redirection

- >, >>, <

*** Useful tools

- wc
- grep
- sort
- uniq
- cut
- sed

*** Combining tools with pipes

*** File rights

*** A word about streams?

- stdin, stdout, stderr

** Shell scripts

-   Storing simple commands in shell scripts
-   Parsing arguments
-   Control flow (loops, if, while)
-   Applying script to all files in a directory
-   Version control of shell scripts
