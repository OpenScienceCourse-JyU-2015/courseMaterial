* Version control with Git

(Matthieu Bruneaux)

** Overview

- Introduction to version control
- Setting up and using Git
- Basic Git usage
- Setting up a remote repository for collaborative work
- Cloning, pushing and pulling
- Workflow example for a single developer

** Introduction to version control

*** What is version control?

- Some common issues arise when files are not version-controlled:

  [[https://github.com/mdjbru-teaching-material/turku_course/blob/master/course-material/version-control-with-git/img/phd052810s.png]]

- This happens not only for data, but for scripts also... How can we do it better?

*** Reproducibility of research?

- Research should be reproducible by others.
- This refers to the experiments generating the data, but also to the analysis
  of the data.
- The first researcher who will need to reproduce your results is likely to be
  *you*.

A lab notebook for analyses ?

- Lab books make lab work traceable. Analyses should also be traceable.
- Analysis steps must be recorded, and reverting to any previous step must be
  possible.
- This ensures that we always exactly know how a result was generated.

*** Version control

- Version control is a tool to keep track of file changes.
- However, version control softwares offer more than simply recording
  successive versions of a file.
- Version controlled projects can be forked, merged and shared with
  collaborators.
- Interesting both for collaborative work and for single developper (the single
  developper case will be developped in more details later)

*** Example of a version control flow for a Python script

[[https://github.com/mdjbru-teaching-material/turku_course/blob/master/course-material/version-control-with-git/img/version-control-workflow.gif]]

- *V1*, *V2*, and *V3* are successive versions of the script
- *V4* is committed, but then a mistake is found. We revert to *V3*
- A new, correct *V4* is committed
- *V5* and *V6* are successive versions of the script
- At this point, we want to implement a new feature that might be interesting,
  but which is experimental. In order to keep *V6* clean, we create a new
  branch in which we can experiment with the script without damaging the stable
  *V6*
- *V6b* and *V7b* are successive versions of the experimental script
- At some point, the experimental changes are mature and we want to merge them
  back into the master branch. *V7b* and *V6* are merged together into *V8*
- We realise we want to revert to a previous version of one function in the
  script. For this function, we revert to the code present in *V2*, keep all
  the rest as it is in *V8* and commit it as *V9*
- *V10* is the next commit

*** What are the available tools?

- Existing version control tools
  + [[https://subversion.apache.org/][Subversion]]
  + [[http://bazaar.canonical.com/en/),][Bazaar]]
  + [[http://mercurial.selenic.com/)][Mercurial]]
  + [[http://git-scm.com/][Git]]
- Online servers for repositories
  + [[https://bitbucket.org/][BitBucket]] (free private repositories)
  + [[https://github.com][GitHub]] (free for public repositories but not for private repositories)

** Installing and setting up Git

*** Git installation

- Install Git

*** Git basic setup

- Set up the PATH for accessing it from the command line
- Set up the user name and email
#+BEGIN_SRC bash
git config --global user.email "matthieu.d.bruneaux@jyu.fi"
git config --global user.name "Matthieu Bruneaux"
#+END_SRC

** Basic Git usage

We want to develop some Python code to analyze DNA coding sequences. The
sequences we are going to use in our test can be found [[https://github.com/mdjbru-teaching-material/turku_course/blob/master/course-material/version-control-with-git/test-seq.fasta][here]].

*** Adding files and committing changes

**** Overview

- First commit
- Second commit
- Git staging area, commit hashes
- Git log and graphical interfaces
- Amend commit messages

**** Your tasks

- Write a simple Python function that takes a sequence string (DNA
  nucleotides), and checks that it starts with a start codon. Test it with some
  sequences from the fasta file.
- Commit your first version of the script
- What happens if you test your function with Milou's sequence? Modify your
  function accordingly, and perform a second commit.

*** Diff and reverting to previous versions

**** Overview

- Diff between files
- How to revert to a previous version

**** Your tasks

- Write a function that takes a sequence string, and returns a list of
  codons. Test your function with a few sequences. What happens with the bat
  sequence?
- Modify your function to take it into account. Check the differences between
  your files and commit.
- Wait, your collaborator told you a T was missing on the bat sequence. Modify
  the sequence data in the fasta file, commit the new data file, and revert to
  the previous version of your function.

*** Branching and merging

**** Overview

- Branching and merging
- Resolving merge conflicts

**** Your tasks

- Now you are ready for some serious analysis. You think that histidine is a
  particularly interesting amino-acid, and you would like to count how many
  histinde-coding triplets you have per coding sequence. However, this is a
  quite experimental part of your analysis: create a new branch, add your
  function and test it. When you are satisfied with it, merge it to your master
  branch.
- Actually, it would be nice if your function could count *any* codons, not
  just histidine-coding ones. This is even more experimental, so create another
  branch, modify your function, and...
- Wait, your supervisor asks you to add as quickly as possible a checking step
  so that only A, T, G, C are allowed in the sequences. This is a crucial
  update, so do it in your master branch and commit.
- Now you can go back to your experimental branch. Finish your function
  modification, test it and merge it with your master branch when you are
  happy.
- Resolve merging conflicts as they arise.

** Setting up and using remote repositories

*** Cloning a remote repository

**** Overview

- Getting a copy of a public repository

**** Your task

- Search GitHub for a python script which could do enrichment test of gene
  ontologies. You can search terms like "python", "enrichment", "gene
  ontology". Note that sometimes people refer to "gene ontology" as "GO".
- Clone an interesting repository to your computer.
- Have a look at the history of the repository and at the files. Did the author
  used any branches?
- Modify one of the files and commit your changes.

*** Creating a new remote repository and pushing code

**** Overview

- Set up a GitHub account
- Create a new repository

**** Your tasks

- You are pretty proud of your python code to analyse coding sequences and want
  to do good to the world: let's share it publicly!
- Create a GitHub repository for you (you can use a pseudonyme and delete the
  account afterwards if you don't want to gieve GitHub your real information)
- Set up your remote repository links
- Push your code online.

*** Collaborating to a public repository

**** Overview

- Fork a repository
- Make changes and send a pull request

**** Your task

- Fork the existing GitHub repository at [[https://github.com/mdjbru-teaching-material/pyFastaParser]]
- Clone your fork on your local computer
- Explore the code, test it, fix any bug you find and add some new functionality
- Push your modifications and send a pull request.

** Going further: workflow example for single developper

** Resources

links go here

* Notes

Exercise: design a set of Python scripts to handle fasta sequences

Coding sequences, check for beginning of ORF, stop-codon, translation, etc...

Load the translation table from a text file

Track and fix errors in this file

Testing with this file

Profiling: translation with list vs dictionary

What is version-controlled? Scripts, not data, except if hand-generated data
(e.g. transcription of written records)
