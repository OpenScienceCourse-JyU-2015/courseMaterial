#+TITLE: FROM DATA TO ANALYSIS: A CASE STUDY

** Before the course

Prerequisites:
- understanding what is *tidy data* (and what is not)
- basic *SQL* skills
- *version control* skills with Git
- basic knowledge of *programming with Python*

** After the course

This session is mostly aimed at putting together the foundations laid during
the previous two days of the bootcamp through a case study example.

During this session you will practice:
- *cloning* a remote repository
- being *critical* of dataset formats
- writing *Python functions*
- *keeping track* of your code
- *sharing* your code with others

However, some more advanced topics will also be introduced during the
processing of the course data.

After completing this course you will know:
- how to load data from a database and merge tables using *Pandas*
- how to make plots using the *matplotlib* package

* 1. Case study introduction: the evolution of fish mitochondrial proteins

** Once upon a time...

- Mitochondrial genomes encode some proteins which are essential to the
  production of ATP by the cell mitochondrias via oxidative
  phosphorylation.

- You are an *evolutionary biologist* interested in *how those key proteins
  have evolved in fishes living in different habitats*, since different
  environments might exert different selection pressures on the cell energy
  machinery.

  [[images/yellowgin-tuna_molly-edmonds_worldwildlife_org.jpg]]

  (image by Molly Edmonds, taken from [[http://www.worldwildlife.org/stories/tracking-tuna-in-the-coral-triangle][worldwildlife.org]])

- There is a lot of *ecological* and *genomic data* about fish that have
  already been produced by the scientific community. There must be a way to
  leverage this knowledge by combining and analyzing these data together to get
  insights into fish protein evolution!

** What was done before

- Some of your colleagues have already been gathering data from the *public
  repositories* (GenBank and FishBase), and have started to store it in a more
  or less *tidy format in sqlite databases*.

- Because your colleagues know how important it is to provide a full record of
  how data is acquired and processed, they put everything into a
  *version-controlled repository*.

** What you must do

- Your task is to *clone locally* this repository and to use it as a *starting
  point for your own work*

- The files you will be using to start with are:
  + =fishbase_data.sqlite=
  + =aa_properties.sqlite=

- Your mission:
  + *Load* and *explore* the data from the two provided SQLite databases
  + Gather all the useful data into *one single, tidy dataset*
  + *Each student pair* will write some Python code to calculate the average
    value of a specific *biochemical property* (e.g. hydrophobicity,
    flexibility) for each protein
  + *Share* your code with your colleagues by *pushing* it to the master
    repository
  + Use this *collaborative work* to explore the relation between *fish
    ecology* and *protein evolution*

* 2. Clone the remote repository

- The repository which will be used for this session is:
  + https://github.com/OpenScienceCourse-JyU-2015/day-03-case-study

- You must clone locally this repository to your own computer. There are two
  possible ways to do it:
  + Using the command line (=Git bash= on Windows)
  + Or using the graphical user interface (=Git GUI= on Windows). That's what
    we are going to do today;

  (live demonstration of Git GUI for Windows by the teacher)

- All students who have a GitHub account will be added as *owners* of the
  repository. This gives each student the administrative rights needed to push
  their modifications to the repository.

* 3. Load and explore the data from the SQLite databases

- Load the datasets into Python

- Examine the tables: are they tidy? If not, how to make them tidy?

- Which data will we need later on?

* 4. Produce a single, tidy dataset for the rest of the analyses

** 4.1 Write a script to produce a tiny dataset

- Use Python and Pandas to write a script called =make_tidy_data.py= (in the
  =scripts= subfolder) which prepares a single, tidy dataset from the SQLite
  databases.

- This script should save the tidy dataset in a tab-separated table called
  =tidy_data.csv= in the =data= subfolder.

- Remember to keep track of your code: commit your changes!

** 4.2 Pull the version from the shared GitHub repository

- The teacher will push to the GitHub repository his version of the script and
  of the tidy dataset.

- Since we all did the same work, we can decide to use the teacher's version as
  a reference for our common project repository.

- Pull the teacher changes with:
  #+BEGIN_SRC sh
  git pull origin master
  #+END_SRC
  What happened?

- We will solve the conflicts by telling Git to keep the version from the
  repository. We do this with:
  #+BEGIN_SRC sh
  git checkout --theirs make_tidy_data.py
  git checkout --theirs tidy_data.csv
  #+END_SRC
  (=--theirs= tells Git to keep the version from the remote repository; we
  would use =--ours= instead of =--their= to keep the local version of the
  file)

- Now that the conflict has been resolved, commit:
  #+BEGIN_SRC 
  git commit -m "Merge with teacher's script for tidy dataset"
  #+END_SRC

- Have a look at your repository history using the Git GUI.

* 5. Work in groups: calculate protein biochemical properties

** 5.1 Amino acid properties

- Use the Firefox plugin *SQLite manager* to open the database
  =aa_properties.sqlite=.

- The database contains 8 tables with some indices about amino acid
  properties. The tables are:
  + BHAR880101: Average flexibility indices (Bhaskaran-Ponnuswamy, 1988)
  + DESM900102: Average membrane preference: AMP07 (Degli Esposti et al., 1990)
  + GRAR740102: Polarity (Grantham, 1974)
  + JURD980101: Modified Kyte-Doolittle hydrophobicity scale (Juretic et
    al., 1998)
  + KLEP840101: Net charge (Klein et al., 1984)
  + KRIW790103: Side chain volume (Krigbaum-Komoriya, 1979)
  + PUNT030102: Knowledge-based membrane-propensity scale from =3D_Helix= in
    MPtopo databases (Punta-Maritan, 2003)
  + RADA880107: Energy transfer from out to in(95%buried)
    (Radzicka-Wolfenden, 1988)

- We can use each index to calculate some rough average biochemical properties
  for each protein.

*** Your task

- You will work by *groups* of two or three students. Each group will choose a
  biochemical property of interest among the 8 available and write a function
  to calculate it for any protein.

** 5.2 Live demonstration

- The teacher will demonstrate in a live coding session how to write a function
  that:
  + takes a protein sequence as an input
  + calculates the average value of a given biochemical property for this
    protein
  + returns this numerical value

(live session:
  + for loop over a string
  + using a dictionary to map values)

- This function is saved to a separate file, =average.BHAR880101.py=.

- Teacher commits and pushes.

- You pull the updated repository to your local repository.

** 5.3 Your code

- Now is your turn: write some Python code to calculate, for a given protein
  sequence, the average value of the biochemical property you choose in your
  group.

- There are more than one way to do it: feel free to use a different method
  from the teacher's template.

- Save your function in a separate Python script in the project folder. Name
  the script according to the amino acid index you choose
  (e.g. =average.BHAR880101.py= for the BHAR880101 index).

- Commit.

* 6. Share with your collaborators and use their code

** 6.1 Share the code

- Each group pushes their changes to the GitHub repository.

- Once everyone has pushed their changes, everyone pulls the GitHub repository
  containing all the necessary code.

** 6.2 Apply those functions to the tidy dataset

- It is possible to apply a function to each element of a column:
  #+BEGIN_SRC sh
  # Function to count the number of "M"
  def countM(sequence):
      n = sequence.count("M")
      return n

  # Apply this function to COI sequences
  connection = sql.connect("data/fishbase_data.sqlite")
  df = pd.read_sql_queries("SELECT * FROM seq_COI", connection)
  df.head()
  df["sequence"].apply(countM)
  #+END_SRC

- Using the code from yourself and your collaborators, update
  =make_tidy_data.py= to add new columns to =tidy_data.csv= containing average
  biochemical properties for COI proteins.

(The teacher commits and pushes to have a common reference on GitHub if needed)

* 7. Explore the relation between fish ecology and protein evolution

- Use Pandas and matplotlib to explore graphically the relationship between
  fish ecology and their protein biochemical properties.
